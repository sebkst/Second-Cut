' Gambas class file


'this is a good solution,
' uses the camera to stream it to a loopback
' then ffmpeg encodes it
' and  mplayer plays it 

'added to /etc/rc.local :
'aptitude install v4l2loopback-source module-assistant
'module-assistant auto-install v4l2loopback-source
'modprobe v4l2loopback

' plus install gst-v4l2loopback plugin


Inherits FMoviePlayer
'Inherits FMPSLIDER

'no use of playps.

Private gstps As Process
Private feedps As Process

Public isStreaming As Boolean = False

Private gstreamerTrace As String
Private gstreamerError As String
Private recprocessTrace As String
Private recprocessError As String


Public Sub _new()
  Dim m As String
  Dim Er As String
  Shell "which mencoder" To m
  If Len(m) <= 8 Then Er = "Error : MEncoder was not found.\nPlease install MEncoder to use this software.\nsudo apt-get install mencoder\n"
  
  Shell "which gst-launch" To m
  If Len(m) <= 10 Then Er = Er & "Error : gst-launch was not found.\nPlease install gstreamer-tools to use this software.\nsudo apt-get install gstreamer-tools\n"

  Shell "which lsmod" To m
  If Len(m) <= 5 Then Er = Er & "Error : lsmod not found.\nPlease install lsmod to use this software.\nsudo apt-get install lsmod\n"
  Shell "which grep" To m
  If Len(m) <= 4 Then Er = Er & "Error : grep not found.\nPlease install grep to use this software.\nsudo apt-get install grep\n"
  Shell "which cut" To m
  If Len(m) <= 4 Then Er = Er & "Error : cut not found.\nPlease install cut to use this software.\nsudo apt-get install cut\n"

  Shell "lsmod | grep v4l2loopback" To m
  If Len(m) <= 12 Then
   Er = Er & "Error : v4l2loopback module not found.\nPlease install the v4l2loopback module to use this software.\n"
   Er = Er & "apt-get install v4l2loopback-source module-assistant \nsudo module-assistant auto-install v4l2loopback-source\nsudo modprobe v4l2loopback"
  Endif
  Shell "which v4l-info" To m
  If Len(m) <= 4 Then Er = Er & "Error : v4l-info not found.\nPlease install v4l-conf to use this software.\nsudo apt-get install v4l-conf\n"

  Shell "gst-inspect v4l2loopback | wc -l" To m
  If CInt(Trim(m)) < 2 Then
    Shell "gst-inspect v4l2loopback" To m  
    Er = Er & "Error : v4l2loopback plugin for gstreamer not found.\n" & m & "Please install the gst-v4l2loopback module to use this software.\n"
    Er = Er & "Download and unzip https://github.com/umlaeute/gst-v4l2loopback/archive/master.zip .\n Then run: ./autogen.sh && make && make install\n"
  Endif
  Shell "which ffmpeg" To m
  If Len(m) <= 5 Then Er = Er & "Error : ffmpeg not found.\nPlease install the latest ffmpeg version to use this software.\n sudo add-apt-repository ppa:jon-severinsson/ffmpeg\n"
  If Len(m) <= 5 Then Er = Er & "sudo apt-get update \n sudo apt-get dist-upgrade \n sudo apt-get install ffmpeg \n "
  
  If Len(Er) > 0 Then Message.Error(Er, "Exit")

  If Len(Er) > 0 Then Quit

If Len(Me.recformat) <= 0 Then

If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "default recordfomat"

'SYDNEYSABRE config
'Me.recformat = "video/x-raw-yuv,width=1280,height=1024,interlaced=false,pixel-aspect-ratio=1/1,framerate=20/1"
'Me.recformat = "video/x-raw-yuv,width=800,height=600,interlaced=false,pixel-aspect-ratio=1/1,framerate=30/1"

'Me.recformat = "video/x-raw-yuv,height=720,interlaced=false,pixel-aspect-ratio=1/1"
' this seems to give a 30 FPS, while is imposed in the caps it does not negotiate the format.
'eeepc and sydney sabre
'Me.recformat = "video/x-raw-yuv,height=720,interlaced=false,pixel-aspect-ratio=1/1" ',framerate=30/1"
'BUT we could already fix/repare the framerate by using the videorate element
' gst-launch -v v4l2src ! videorate  ! 'video/x-raw-yuv,framerate=30/1,height=800' ! v4l2loopback
Me.recformat = "video/x-raw-yuv,height=600"
Me.dimRecVideo = [800, 600]
Me.recFPS = 20

Endif

If Len(Me.reccmd) <= 0 Then   
If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "default recordcommand"
 ' record only video in MPEG-one
 '  Me.reccmd = "ffmpeg -f video4linux2 -i $(VIDEODEVICE) $(FILE)"

 ' in MPEG-2 with audio
' Me.reccmd = "ffmpeg -f alsa -i default -isync -f v4l2 -i $(VIDEODEVICE) -bf 1 -c:v mpeg2video $(FILE)"
 'too slow Me.reccmd = "ffmpeg -shortest -f alsa -i default -itsoffset 00:00:00 -ab 128k -f v4l2 -i $(VIDEODEVICE) -c:v mpeg2video -pix_fmt yuv420p -me_method epzs -r 29.97 -g 45 -bf 2 -trellis 2 -cmp 2 -subcmp 2 -b:v 2500k -bt 300k -f vob $(FILE)"
  '
  Me.reccmd = "ffmpeg -shortest -f alsa -i default -itsoffset 00:00:00 -ab 128k -f v4l2 -async 1 -i $(VIDEODEVICE) -c:v mpeg2video -pix_fmt yuv420p -bf 1 -r $(RECORDFPS) -vsync 2 -b:v 2500k -bt 300k -q:v 30 -y $(FILE)"
'todo: test mjpeg compresseed format  
' ffmpeg -f video4linux2 -s 640x480 -r 60 -vcodec mjpeg -i /dev/video0 -r 60 -vcodec copy /tmp/test1.mjpeg
 ' ffmpeg -f video4linux2 -i /dev/video0 -s 1280x800 -r 30 -c:v mjpeg -f mpeg2video -c:v mpeg2video /tmp/test1.mpg

  '"-async 1 -acodec mp2 -ab 192k -isync -f v4l2 -i $(VIDEODEVICE) -c:v mpeg2video -pix_fmt yuv420p -me_method epzs -r 29.97 -g 45 -bf 2 -trellis 2 -cmp 2 -subcmp 2 -b:v 2500k -bt 300k -f vob $(FILE)"
' -itsoffset 00:00:00 -acodec ac3

 'in 20 minutes (from 2fps) get back to 26 FPS

Endif

If Len(Me.filenameSkeleton) <= 0 Then   
   If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "default filenameSkeleton"
   Me.filenameSkeleton = "Format(Now, \"yyyy-mmm-dd_hh-nn-ss\" ) & \".mpg\""    
Endif

If Exist(Me.videodevice) Then Me.btnRec.Enabled = True

End 



Public Sub btnRec_Click()
  
  If Me.existingPlayer Then Me.StopMovie()
  
  If Me.isrecording Then
         Me.StopRecording()
         Return
  Endif
  
  If isStreaming Then StopRecording()
  
     Me.onbtnRec_Click()
 
     Me.recfile = Me.recdir & "/" & Eval(Me.filenameSkeleton)
     If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "start recording into " & Me.recfile
'    If (Len(Me.getcbVideoDeviceText()) > 0) And Exist(Me.getcbVideoDeviceText()) Then
'      Me.videodevice = Me.getcbVideoDeviceText()
'    Endif
    startRecording(Me.recfile)

End

Static Public Sub findFreev4l2loopback() As String 
Dim m As String
Dim n As String
Dim ar As String[]

'
'grep for

'### v4l2 device info [/dev/video4] ###
'general info
'    VIDIOC_QUERYCAP
'  driver: "v4l2 loopback"


Shell "for i in /dev/video*; do v4l-info $i | grep -q -i 'driver.*:.*v4l2.*loopback' && echo $i ; done" To m
m = Replace(Trim(m), "\n", " ")
If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "loopback devices : " & m
Shell "for i in " & m & " ; do v4l-info $i | grep -q -i 'VIDIOC_ENUMINPUT' || echo $i ; done " To n
If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "FREE loopback devices : " & Replace(Trim(n), "\n", " ")

If Len(Trim(n)) <= 0 Then 
  Message.Error("ERROR : NO FREE v4l2loopback left\n can not start streaming")
  Return ""
  
Else
  ar = Split(Trim(n), "\n", "", True)
  Return ar[ar.Max]
Endif


'for vdev in /dev/vide*; do gst-launch -v --gst-debug=0 videotestsrc  !  v4l2loopback device=$vdev > /dev/null & lpid=$!; echo "pid for $vdev id $lpid"; sleep 3s ;ps -f -p $lpid >/dev/null || echo "$vdev is OCCUPIED" ; ps -f -p $lpid >/dev/null && echo "$vdev should be free(d)" && kill -INT $lpid ; ps -f -p $lpid >/dev/null && echo "$lpid still alive" && kill -9 $lpid ; ps -f -p $lpid >/dev/null && echo "WWWWWWW $lpid still alive" ; ps -f -p $lpid >/dev/null || echo "ok" ; done | less

'result :
'pid for /dev/video0 id 8611
' / dev / video0 Is OCCUPIED
' ok
' pid For / dev / video1 id 8618
' / dev / video1 Is OCCUPIED
' ok
' pid For / dev / video2 id 8627
' / dev / video2 should be Free(d)
' 8627 still alive
' ok
' pid For / dev / video3 id 8635
' / dev / video3 should be Free(d)
' 8635 still alive
' ok
' pid For / dev / video4 id 8643
' / dev / video4 Is OCCUPIED
' ok


End

Public Sub StopRecording()
Dim fixindexps As Process
Dim i As Integer
Dim maxwait As Integer = 99
  ' kill the recps (mencoder), (done in parents)
  If Not Me.isrecording Then Print "stop what ? I am not recording"
  
  If Me.existingPlayer Then Me.StopMovie() 
  
  If Not Me.isrecording Then Return
  
  Me.btnRec.Background = Color.Red
  'Shell "kill -USR2 " & Me.recps.Id Wait
  'Print "sending: SIGUSR2 To the recording Process"
  'Shell "kill -INT " & Me.recps.Id Wait
  ' Print "sending: SIGINT To the recording Process"
  Try Print #Me.recps, "q"
  If Error Then Try Me.recps.Kill()

  Try feedps.Kill
  ' kill gst
  Try Shell "kill -9 " & feedps.Id
  If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "feed mplayer killed"
  
  i = 0
  ' Kill feedps
  '  While i < maxwait And 0 >= InStr(recprocessError & recprocessTrace, "muxing overhead")
  Wait 0.5
  '      i = i + 1
  '     Print "*" 
  '  Wend
    
  Try Me.recps.Kill
  Try Shell "kill -9 " & Me.recps.Id 
  If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "RECORDER killed"

  'reconstruct the index
  
  Shell "mv -v " & Quote(Me.recfile) & " " & Quote(Me.recfile & "0") Wait
  fixindexps = Exec ["mencoder", Me.recfile & "0", "-msglevel", "all=0", "-forceidx", "-ovc", "copy", "-oac", "copy", "-fps", Me.recFPS, "-o", Me.recfile]
  If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "RUN: " & Main.join(["mencoder", Me.recfile & "0", "-msglevel", "all=0", "-forceidx", "-ovc", "copy", "-oac", "copy", "-o", Me.recfile], " ")
  
  
  If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & recprocessTrace
  If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "--------------"
  If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & recprocessError 
  If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "--------------"
  
  
  
  Try Shell "kill -INT " & gstps.Id 
  If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "gstreamer INT"
  
   i = 0

  While i < maxwait And 0 >= InStr(gstreamerTrace, "NULL")
    Wait 0.2
    Print "."
    If InStr(gstreamerTrace, "ERROR") > 0 Or InStr(gstreamerTrace, "ERREUR") > 0 Then
       Print "ERROR in GSTREAMER"
       Break
    Endif
    i = i + 1
  Wend
  Try gstps.Kill
  Try Shell "kill -9 " & gstps.Id 
  If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "gstreamer killed"
  If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & gstreamerTrace
  If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "--------------"

  Try i = fixindexps.State
  If Not Error Then 
    While i == Process.Running
    
     Wait 0.9
     Print "^";
     Me.text = "WAIT " & Me.Text
     Try i = fixindexps.State
     If Error Then Break
    Wend
    Me.Text = Replace(Me.Text, "WAIT ", "")
  Endif
  If Not Me.dbg() Then Shell "rm -f -v " & Quote(Me.recfile & "0") Wait
  Me.isrecording = False   
  Me.afterStopRecording()
'  Print "gstreamer : " & gstps.State
 ' Print "mplayer : " & feedps.State  
End


Public Sub startRecording(mp4 As String)
  Dim r As String
  Dim feedpscmd As String[]
  Dim gstpscmd As String
  Dim freevlb As String = findFreev4l2loopback()
  Dim maxwait As Integer = 60
  Dim i As Integer
  
  If (Len(freevlb) <= 0) Then 
    StopRecording()
    Return
  Endif
  
  If Len(mp4) <= 0 Then Return
  
  Me.oldme = []
  Me.dimPlayVideo = Me.dimRecVideo
  Me.prepareDwgMoviePlayer()
  
  gstreamerTrace = ""
  gstreamerError = ""
  gstpscmd = "gst-launch -v v4l2src device=" & Me.videodevice & " ! " & Me.recformat & " !  v4l2loopback device=" & freevlb 
  If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "RUN: " & gstpscmd  
  gstps = Exec Split(gstpscmd, " ", "'", True, True) For Read As "gstreamer"
 ' gstps = Shell Main.join(gstpscmd) & " 2>&1" For Read As "gstreamer"
  isStreaming = True
  i = 0
  While i < maxwait And 0 >= InStr(gstreamerTrace, "GstSystemClock")
    Wait 0.3
    i = i + 1
    If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "waiting for the stream to stabilize"
    If InStr(gstreamerError, "ERROR") > 0 Or InStr(gstreamerError, "ERREUR") > 0 Or InStr(gstreamerError, "GStreamer-CRITICAL") > 0 Then
       Message.Error("ERROR : can not access the device to stream to v4l2loopback " & gstreamerError)
       StopRecording()
       Me.afterStopRecording()
       Return
    Endif
'    If InStr(gstreamerTrace, "NULL") > 0 Then Return
  Wend
  Wait Me.delayRecord
'  v4l2src device="/dev/video1" ! queue ! videoscale method=1 ! video/x-raw-yuv,width=320,height=240 !
  
  r = "mplayer -wid " & CStr(Me.getDwgMoviePlayerHandle()) & " -geometry " & CStr(Me.dwgMoviePlayer.W) & "x" & CStr(Me.dwgMoviePlayer.H)
  r &= " -input conf=/dev/null tv:// -tv device=" & freevlb
  r &= " -vo xv -fps " & CStr(CInt(0.9 * CFloat(Me.recFPS))) & " -ao null -noframedrop -msglevel all=0 "
  feedpscmd = Split(r, " ", "'", True, True)
  If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "RUN: " & r 
  feedps = Shell r & " 2>&1" For Read Write As "feedmplayerps"
'  feedps = Exec feedpscmd For Read Write As "feedmplayerps"


  r = Me.formatReccmd(Me.reccmd, mp4, Me.dimRecVideo, freevlb, Me.recFPS)
  'Sleep 2.5
  If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "RUN: " & r  
  recprocessError = ""
  recprocessTrace = ""
'  Me.recps = Shell r For Read Write As "RecProcess"
'  Me.recps = Shell r & " 2>&1" For Read Write As "RecProcess"
  Me.recps = Exec Split(r, " ", "\"", True, False) For Read Write As "RecProcess"
  'dwgMoviePlayer.Hide
  'timShow.Enabled = True
  Me.setTxtcmdText("")
  Me.isrecording = True 
   
End
'seems not to be called why ??????????
Public Sub recProcess_Kill()
Dim b As Boolean = False
  b = InStr(recprocessError, "[NULL") > 0
  b = b Or (InStr(recprocessError, "ERROR") > 0)
  b = b Or (InStr(recprocessError, "ERREUR") > 0)
  b = b Or (InStr(recprocessError, "Cannot find") > 0)
  b = b Or (InStr(recprocessError, "Invalid argument") > 0)
  b = b Or (InStr(recprocessError, "Unknown") > 0)
  b = b Or (InStr(recprocessError, "Failed to") > 0)
  b = b Or (InStr(recprocessError, " error") > 0)
  
  If b Then  
     Message.Error("ERROR in RECORDING: verify your parameters, test the commandline... \n" & recprocessError)   
     If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "recprocess Error : "
     If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & recprocessError
     Me.btnKill_click()
  Endif
    
  If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "Stop Recording"
  Me.isrecording = False   
  Me.afterStopRecording()
  
End

Public Sub recProcess_Read()
   Dim sData As String  
    sData = Read #Last, -255
    'Print "recps: " & sData
    recprocessTrace &= sData
End


Public Sub gstreamer_Read()
    Dim sData As String  
    Read #Last, sData, Lof(Last)
    gstreamerTrace &= sData
    'Print "gstreamer: " & sData
End
Public Sub gstreamer_Kill()
  If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "gstreamer stop"
  If InStr(gstreamerError, "ERROR") > 0 Or InStr(gstreamerError, "ERREUR") > 0 Or InStr(gstreamerError, "GStreamer-CRITICAL") > 0 Then
     Me.StopRecording()
     Message.Error("ERROR in streaming to v4l2looopback: verify your parameters \n" & gstreamerError)     
  Endif
  isStreaming = False
End

'Public Sub feedmplayerps_Read()
  ' Dim sData As String  
  '  sData = Read #Last, -255
    'Print "feedps: " & sData
'End

Public Sub gstreamer_Error(Err As String)
  If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "ERR GSTREAMER : " & Err
  gstreamerError &= err
End
Public Sub recProcess_Error(Err As String)
  Dim m As String = ""
  If InStr(err, "time=") > 0 Then
    'fps= 27 q=25.7 Lsize=    1017kB time=00:00:15.86 bitrate= 
    If InStr(err, "fps=") > 0 Then m = Replace(Mid(err, InStr(err, "fps="), 8), " ", "") & " " 
    err = Mid(err, 5 + InStr(err, "time="))
    If InStr(err, "bitrate=") Then 
        m &= Mid(err, 1, -1 + InStr(err, "bitrate="))
    Else
      m &= Split(err, "\n")[0]
    Endif
    
    Me.setTxtcmdText(m)
  Else
    If Len(recprocessError) > 2 Then
       recprocessError &= err
    Else
       If 0 < InStr(err, "libav") Then recprocessError &= err
    Endif
  Endif
End
Public Sub PlayProcess_Error(Err As String)
      If (Me.dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "ERR mplayer " & Err
End
