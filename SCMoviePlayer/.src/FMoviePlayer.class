' Gambas class file

Public recps As Process
Public playps As Process
Private isplaying As Boolean = False
Public isrecording As Boolean = False
Public existingPlayer As Boolean = False

Private inputplaypsfile As String
Private inputplayps As Stream

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public filenameSkeleton As String = ""
Public recfile As String = "" ' = "/home/seb/Téléchargements/FL/sydneysabre/Second-Cut/f.flv"
Public recdir As String = Conv$(User.home, Desktop.Charset, System.Charset)
Public reccmd As String = ""
Public playcmd As String = ""

Public geom As Integer[] = [0] ' array of W H X Y

Public recformat As String = ""

Public configurationFile As String = ".secondcut"

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Private dimRecVideo As Integer[] = [320, 240]
Public dimRecVideo As Integer[] = [800, 600] 
Public recFPS As String = "20"
'time to delay the start of recording, becaause gstreamer is not immediate
Public delayRecord As Float = 0.5

Private VIDEO_FPS As Float = 30
Private ID_LENGTH As Float
Private TIME_POS As Float
Private CURFRAME As Integer
Private moveBackwards As Boolean = False
Public seekBackwards As Float = 1

Public dimPlayVideo As Integer[] = dimRecVideo
Public videodevice As String = "/dev/video1"
Private playspeed As Float = 1
Public oldme As Integer[]
'old cursor
Private omx As Integer
Private omy As Integer

Private wasrunning As Boolean = True
Const ALLOWEDKEYS As String = " srpqhfd" '' + key codes up down left right'

Public Sub Form_Resize()
  
  Dim rr As Float = dimPlayVideo[0] / dimPlayVideo[1]
  Dim dr As Float
  
  '  panButton.Resize(Me.CLientW, btnOpen.h + cbVideoDevice.H)
  ' If (sbFrames.Visible And HBox2.Visible) Then 
  '   panButton.Move(0, Me.CLientH - VBox1.H, Me.CLientW, VBox1.H)
  ' Else
  'Move(0, Me.CLientH - VBox1.H, Me.CLientW)
  panButton.Move(0, Me.CLientH - VBox1.H, Me.CLientW)
  '  Endif
  
  If dwgMoviePlayer.Visible Then
    dwgMoviePlayer.Move(0, 0, Me.ClientW - 0, Me.ClientH - panButton.H - 0)
    dr = dwgMoviePlayer.w / (dwgMoviePlayer.h + 0.0009)
    
    If dr > rr Then 'height is fixed
      dwgMoviePlayer.w = dwgMoviePlayer.h * rr
    Else 'width fixed
      dwgMoviePlayer.h = dwgMoviePlayer.w / rr    
    Endif
  Endif
  If txtAbout.Visible Then txtAbout.Move(4, 4, Me.ClientW - 8, Me.ClientH - panButton.H - 8)
  
End

Public Sub relaxRuttonsAndSetSpeed(s As Float)
  
  Dim t As ToggleButton 
  
  For Each t In [btnPlayQuarter, btnPlayHalf, btnPlay, btnPlay2x, btnPlay4x]
    If Mouse.Inside(t) Then 
      If Not existingPlayer Then 
         If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "WRONG CALL of relaxRuttonsAndSetSpeed pressed and activated: " & t.Name
        isplaying = False
        Continue
      Endif
      
      If (s == playspeed) Then
        'there is NO need to change speed
            If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "toggle pause/resume"
        If (isplaying) Then
              If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "now in pause"
          Try Print #inputplayps, "pause"
          isplaying = False
        Else
              If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "now resume"
          Try Print #inputplayps, "pause"
          isplaying = True
        Endif
      Else
            If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "changing the speed for x" & CStr(s)
        
        ' If (s == 0.25) And (playspeed > 0.3) Then Print #playps, "{";
        ' If (s == 0.25) And (playspeed > 0.9) Then Print #playps, "{";
        ' If (s == 0.25) And (playspeed > 1.9) Then Print #playps, "{";
        ' If (s == 0.25) And (playspeed > 3.9) Then Print #playps, "{";
        ' 
        ' If (s == 0.5) And (playspeed < 0.3) Then Print #playps, "}";
        ' If (s == 0.5) And (playspeed > 0.9) Then Print #playps, "{";
        ' If (s == 0.5) And (playspeed > 1.9) Then Print #playps, "{";
        ' If (s == 0.5) And (playspeed > 3.9) Then Print #playps, "{";
        ' 
        ' If (s == 1) And (playspeed < 0.3) Then Print #playps, "}";
        ' If (s == 1) And (playspeed < 0.6) Then Print #playps, "}";
        ' If (s == 1) And (playspeed > 1.9) Then Print #playps, "{";
        ' If (s == 1) And (playspeed > 3.9) Then Print #playps, "{";
        ' 
        ' If (s == 2) And (playspeed < 0.3) Then Print #playps, "}";
        ' If (s == 2) And (playspeed < 0.6) Then Print #playps, "}";
        ' If (s == 2) And (playspeed < 1.2) Then Print #playps, "}";
        ' If (s == 2) And (playspeed > 3.9) Then Print #playps, "{";
        ' 
        ' If (s == 4) And (playspeed < 0.3) Then Print #playps, "}";
        ' If (s == 4) And (playspeed < 0.6) Then Print #playps, "}";
        ' If (s == 4) And (playspeed < 1.2) Then Print #playps, "}";
        ' If (s == 4) And (playspeed < 2.2) Then Print #playps, "}";
        
        Try Print #inputplayps, "speed_set " & CStr(s)
        
        If (isplaying) And (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "let it play"
        If (Not isplaying) And existingPlayer And (s > playspeed) Then
              If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "still playing"
          isplaying = True
        Endif
        If (Not isplaying) And existingPlayer And (s < playspeed) Then
          ' Print "now resume"
          ' Try Print #inputplayps, "pause"
            If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "still playing"
          isplaying = True
        Endif
        
      Endif ' change of speed
      
    Else 'mouse not on the control      
    Endif 
  Next 
  
  playspeed = s
  
End

Public Sub btnPlay_Click()
  
  If isrecording Then Me.stopRecording()  
  If existingPlayer Then
    relaxRuttonsAndSetSpeed(1)
  Else
    runMPlayer(recfile, 1)
  Endif
  
End

Public Sub _new()
  
  Dim m As String
  
  Shell "which mplayer" To m
  If Len(m) <= 6 Then Message.Error("Error : MPlayer was not found.\nPlease install mplayer to use this software.\nsudo apt-get install mplayer", "Exit")
  If Len(m) <= 6 Then Quit 
  
  If Trim(Application.Args[1]) == "-config" Then
    If Exist(Conv$(Application.Args[2], Desktop.Charset, System.Charset)) Then
      MConfiguration.getconfig(Me, Conv$(Application.Args[2], Desktop.Charset, System.Charset))
      'WHERE TO SAVE THE CONFIG ??? 
      'classically int the normal .secondcut
      configurationFile = User.Home & "/" & configurationFile
    Else
      Print "ERROR : configuration file not found, changing for default"
      configurationFile = User.Home & "/" & configurationFile
      If Exist(Conv$(configurationFile, Desktop.Charset, System.Charset)) Then
        MConfiguration.getconfig(Me, Me.configurationFile)
      Endif       
    Endif
  Else
    configurationFile = User.Home & "/" & configurationFile
    If Exist(Conv$(configurationFile, Desktop.Charset, System.Charset)) Then
      MConfiguration.getconfig(Me, Me.configurationFile)
    Endif         
  Endif
  
  If Len(playcmd) <= 0 Then 
     playcmd = "mplayer -vo xv -ac ffmp2, -demuxer lavf -noframedrop -identify -osdlevel 0 -wid $(WINDOWID) -speed $(SPEED) -input file=$(INPUTFILE) -input conf=/dev/null -nolirc -nojoystick -noar $(FILE)" 
  Endif
  
  txtAbout.text = ""
  If Exist(videodevice) Then
    btnRec.Enabled = True
  Else  
    btnRec.Enabled = False
  Endif
  'btnRec.Enabled = False
End

Public Sub prepareDwgMoviePlayer()
  
  dwgMoviePlayer.Show
  txtAbout.Hide()
  'gives trouble If forRec Then sbFrames.Visible = False
  Form_Resize
  dwgMoviePlayer.Enabled = False
  
End

Public Sub runMPlayer(mp4 As String, speed As Float)
  
  Dim realplaypscmd As String
  
  If Len(mp4) <= 0 Then Return
  
  dimPlayVideo = getDim(mp4)
  
  prepareDwgMoviePlayer()
  
  Try playps.kill
  
  Try inputplayps.Close()
  Try Shell "rm -f -v " & inputplaypsfile Wait
  
  inputplaypsfile = Temp
  Shell "rm -f -v " & inputplaypsfile Wait
  inputplayps = Pipe inputplaypsfile For Write
      
  realplaypscmd = Replace(playcmd, "$(WINDOWID)", CStr(dwgMoviePlayer.Handle))
  realplaypscmd = Replace(realplaypscmd, "$(SPEED)", Replace(CStr(speed), ",", ".")) 
  realplaypscmd = Replace(realplaypscmd, "$(INPUTFILE)", Conv$(inputplaypsfile, Desktop.Charset, System.Charset)) 
  realplaypscmd = Replace(realplaypscmd, "$(FILE)", Quote(Conv$(mp4, Desktop.Charset, System.Charset)))
      If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "RUN: " & realplaypscmd
  playps = Exec Split(realplaypscmd, " ", "\"", True, False) For Read Write As "PlayProcess"
  existingPlayer = True
  
  playspeed = speed
  isplaying = True
  txtcmd.Text = ""
  
End

Public Sub PlayProcess_Read()
  
  Dim sData As String  
  Dim s As String  
  Dim ar As String[]
  Dim f As Float 
  Dim i As Integer
  
  If isrecording Then Return
  
  Read #Last, sData, Lof(Last)
  
  '  sData = Read #Last, -255
  'If isrecording Then Print sdata '"is still recording ????"
  
  'Print sdata
  s = Trim(sData)
  i = InStr(s, "ANS_")
  If i > 0 And dbg() Then Print Split(Mid(s, i), "\n")[0]        
  i = InStr(s, "ANS_time_pos=")
  If i > 0 Then     
    ar = Split(Mid(s, i), "\n", "", True)   
    ar = Split(ar[0], "=", "", True, False)
    Try TIME_POS = CFloat(Trim(ar[1]))
    If Not Error Then txtcmd.Text = ar[1]
  Endif
  i = InStr(s, "V: ")
  If i > 0 Then     
    ar = Split(Mid(s, i), "\n", "", True)   
    ar = Split(ar[0], " ", "", True, False)
    'Print ar.count
    'Print ar[3]
    Try CURFRAME = CInt(VIDEO_FPS * CFloat(ar[1]))
    If CURFRAME > sbFrames.MaxValue Then
      
      CURFRAME = sbFrames.MaxValue
       If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "Time over at " & ar[1]
      'sbFrames.MaxValue = CURFRAME
      'ID_LENGTH = CFloat(CURFRAME) / VIDEO_FPS
    Endif
    sbFrames.Value = CURFRAME
    f = 0
    Try f = CFloat(Trim(ar[1]))
    TIME_POS = f
    i = CInt(f) / 60
    txtcmd.Text = CStr(i) & ":" & Format(f - CFloat(60 * i), "00.0")
    
    f = 0
    If 0 < InStr(s, "A-V:") Then
      Try f = CFloat(Trim(ar[3]))
      If Abs(f) > 1 Then
        If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & s
        txtcmd.Text = ". " & txtcmd.Text 
        ''txtcmd.Background = Color.Gray
      Endif
    Endif    
  Else ' not a string of status
    
    i = InStr(s, "VIDEO_FPS=")
    If i > 0 Then 
      ar = Split(Mid(s, i), "\n", "", True)   
      ar = Split(ar[0], "=", "", True, False)
      f = 0
      Try f = CFloat(Trim(ar[1]))
      If f <= 40 And f > 1.0 Then VIDEO_FPS = f
      If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "found FPS: " & Trim(ar[1])
    Endif
    i = InStr(s, "ID_LENGTH=")
    If i > 0 Then 
      ar = Split(Mid(s, i), "\n", "", True)   
      ar = Split(ar[0], "=", "", True, False)
      Try ID_LENGTH = CFloat(Trim(ar[1]))
      
      ' If ID_LENGTH < 1 Then
      '   Try ID_LENGTH = CFloat(Trim(ar[1]))
      ' Endif
      ' NOT IMPLEMENTED IN MPAYER
      ' Print #inputplayps, "set_property length " & CStr(ID_LENGTH)
      sbFrames.Enabled = True
      sbFrames.MaxValue = CInt(ID_LENGTH * VIDEO_FPS)
      CURFRAME = 0
      sbFrames.Value = 0
      sbFrames.MinValue = 0
      If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "found VIDEO length: " & Trim(ar[1])
    Endif
    If dbg() And (InStr(s, "ID_") > 0) Then Print s
  Endif
  
End

Public Sub PlayProcess_Kill()
  
  Try playps.Drop()
  Try playps.Close()
  
  timShow.Enabled = False
  sbFrames.Enabled = False
  dwgMoviePlayer.Hide
  txtAbout.Show
  If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "STOPPING PLAYER****************"
  playspeed = 1
  isplaying = False
  existingPlayer = False
  
  Try inputplayps.Drop()
  Try inputplayps.Close()
  Try Shell "rm -f -v " & inputplaypsfile Wait
  
End

Public Sub StopMovie()
  
  Dim m As String
  
  If Not existingPlayer Then Return
  
  btnPlay.Background = Color.Yellow
  Try Print #inputplayps, "quit"
  If Error Then
    Try playps.Kill
  Endif
  While existingPlayer 
    Wait 0.02
    If dbg() Then Print ".";
  Wend
  If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "playps is " & Split("stopped running crashed", " ")[playps.State]
  Shell "ps -f " & playps.Id To m
  If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & m
  btnPlay.Background = Color.Black
  
End

Public Sub Form_Close()
  If isrecording Then Me.Stoprecording()  
  If existingPlayer Then Me.StopMovie() 
  MConfiguration.saveconfig(Me, Me.configurationFile)
End

Public Sub btnOpen_Click()
  
  Dialog.Title = "Choose a video"
  Dialog.Filter = ["*.mpg", "MPEG Video", "*", "All files"]
  Dialog.Path = recfile
  If Dialog.OpenFile() Then Return
  
  If isrecording Then Me.stopRecording()  
  If existingPlayer Then StopMovie()
  recfile = Dialog.Path
  ID_LENGTH = 0  
  runMPlayer(recfile, 1)
  
End

Public Sub Form_Open()
  
  'If Len(recfile) > 0 Then 
  '  btnPlay.Enabled = True
    
  txtcmd.SetFocus
  
  If geom.Count == 4 Then
    ' W x H + x + y
    Me.Move(geom[2], geom[3], geom[0], geom[1])

  Endif
  
End

Public Sub timShow_Timer()
  dwgMoviePlayer.Resize(1, 1)
  dwgMoviePlayer.Show
  FORM_Resize()
  timShow.Enabled = False
End

Public Sub dwgMoviePlayer_MouseUp()
  
  If isrecording Then Return
  Timframes.Stop  
  txtcmd.Background = Color.Black
  
End

Public Sub dwgMoviePlayer_MouseMove()
  
  Dim f As Float = Abs(Mouse.ScreenX - Me.screenX - dwgMoviePlayer.x - (dwgMoviePlayer.W / 2))
  
  If isrecording Then Return
  
  If (Mouse.ScreenX < Me.ScreenX) Or (Mouse.ScreenX > (Me.ScreenX + dwgMoviePlayer.W + dwgMoviePlayer.x)) Then Return
  If Not Mouse.Left Then Return
  
  If (Mouse.ScreenX - Me.screenX - dwgMoviePlayer.x - (dwgMoviePlayer.W / 2)) < 0 Then 
    moveBackwards = True
  Else
    moveBackwards = False  
  Endif
  If moveBackwards Then
    Timframes.Delay = CInt(600 - f * 2.0 * 200.0 / dwgMoviePlayer.W)
  Else
    Timframes.Delay = CInt(99 + 700 - f * 2.0 * 700.0 / dwgMoviePlayer.W)
  Endif
  txtcmd.Background = Color.HSV(240 + 200 * f / dwgMoviePlayer.W, 255, 255)
  
End

Public Sub Timframes_Timer()
  
  If moveBackwards Then
    Try Print #inputplayps, "seek -" & CStr(seekBackwards)
    Try Print #inputplayps, "pause"    
  Else
    Try Print #inputplayps, "frame_step"
  Endif
  
End

Public Sub dwgMoviePlayer_MouseDown()
  
  Dim f As Float
  
  If isrecording Then Return
  If Not existingPlayer Then Return
  
  f = Abs(Mouse.ScreenX - Me.screenX - dwgMoviePlayer.x - (dwgMoviePlayer.W / 2))
  moveBackwards = (0 > (Mouse.ScreenX - Me.screenX - dwgMoviePlayer.x - (dwgMoviePlayer.W / 2))) 
  If moveBackwards Then
    Timframes.Delay = CInt(600 - f * 2.0 * 200.0 / dwgMoviePlayer.W)
  Else
    Timframes.Delay = CInt(99 + 700 - f * 2.0 * 700.0 / dwgMoviePlayer.W)
  Endif
  txtcmd.Background = Color.HSV(240 + 200 * f / dwgMoviePlayer.W, 255, 255)
  Timframes.start()
  If isplaying Then Try Print #inputplayps, "pause"
  isplaying = False
  Timframes_Timer()
  
End

Public Sub btnPlay2x_Click()
  
  If isrecording Then Me.stopRecording()  
  If existingPlayer Then
    relaxRuttonsAndSetSpeed(2)
  Else
    runMPlayer(recfile, 2)
  Endif
  
End

Public Sub btnPlay4x_Click()
  
  If isrecording Then Me.stopRecording()  
  If existingPlayer Then
    relaxRuttonsAndSetSpeed(4)
  Else
    runMPlayer(recfile, 4)
  Endif
  
End

Public Sub btnPlayHalf_Click()
  
  If isrecording Then Me.stopRecording()  
  If existingPlayer Then
    relaxRuttonsAndSetSpeed(0.5)
  Else
    runMPlayer(recfile, 0.5)
  Endif
  
End

Public Sub btnPlayQuarter_Click()
  
  If isrecording Then Me.stopRecording()  
  If existingPlayer Then
    relaxRuttonsAndSetSpeed(0.25)
  Else
    runMPlayer(recfile, 0.25)
  Endif
  
End

Public Sub panButton_Arrange()
  VBox1.h = 49
  If (sbFrames.Visible) Then VBox1.h = VBox1.H + sbFrames.H
  VBox1.w = panButton.w
  HBox1.w = panButton.w
  If (HBox2.Visible) Then HBox2.w = panButton.w  
  If (sbFrames.Visible) Then sbFrames.w = panButton.W
  HBox1.h = 49
  If (HBox2.Visible) Then
    HBox2.h = 35  
    txtcmd.W = panButton.W / 2 'HBox2.Children.Count
    btnKill.W = panButton.W / 2 ' HBox2.Children.Count
    'Labelvd.W = panButton.W / 2 'HBox2.Children.Count
    ' cbVideoDevice.W = panButton.W / 4
  Endif
  If (HBox2.Visible) Then VBox1.h = VBox1.H + HBox2.H
  
  btnOpen.W = panButton.W / 6 'HBox1.Children.Count
  btnPlayHalf.W = panButton.W / 6 'HBox1.Children.Count 
  btnPlayQuarter.W = panButton.W / 6 'HBox1.Children.Count
  btnPlay.W = panButton.W / 6 ' HBox1.Children.Count
  btnRec.W = panButton.W / 6 'HBox1.Children.Count
  btnSaveDir.W = panButton.W / 6 'HBox1.Children.Count
  'btnPlay4x.W = panButton.W / 7
  'btnPlay2x.W = panButton.W / 7
  
End

Public Sub btnKill_Click()
  
  Shell "sleep 3s && killall -v -KILL mplayer gst-launch gst-launch-0.10 avconv" 
  If isrecording Then Me.Stoprecording()  
  If existingPlayer Then Me.StopMovie() 
  
End

Public Sub keyHasNoEffect() As Boolean 
  
  If InStr(ALLOWEDKEYS, Lower(key.text)) > 0 Then Return False
  If Key.Code == Key.Left Then Return False
  If Key.Code == Key.right Then Return False
  If Key.Code == Key.up Then Return False
  If Key.Code == Key.Down Then Return False  
  Return True
  
End

Public Sub txtcmd_KeyPress()
  
  If keyHasNoEffect() Then Return
  If (InStr(ALLOWEDKEYS, Lower(key.text)) > 0) And (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "pressed " & Key.Text
  
  ' R: Record
  If "r" == Lower(Key.Text) Then 
    Me.btnRec_Click()
  Endif
  ' S: Stop
  If existingPlayer And Not isrecording Then
    If "s" == Lower(Key.Text) Then Try Print #inputplayps, "pause"
    If " " == Lower(Key.Text) Then 
      Try Print #inputplayps, "pause"
      Stop Event
    Endif
  Endif
  
  ' P: Replay Last video at normal speed
  If "p" == Lower(Key.Text) Then 
    movemouseto(btnPlay)
    btnPlay_Click()
    moveMouseBack.trigger()  
  Endif
  ' H: Replay Last video at half speed
  If "h" == Lower(Key.Text) Then 
    movemouseto(btnPlayHalf)
    btnPlayHalf_Click()
    moveMouseBack.trigger()  
  Endif
  
  ' Q: Replay Last video at quarter speed
  If "q" == Lower(Key.Text) Then 
    movemouseto(btnPlayQuarter)
    btnPlayQuarter_Click()
    moveMouseBack.trigger()  
  Endif
  
  ' F: Replay Last video, frame - by - frame mode
  If ("f" == Lower(Key.Text)) Or (Key.Code == Key.Right) Then 
    If isrecording Then Me.stopRecording()
    If Not existingPlayer Then runMPlayer(recfile, 1)
    Try Print #inputplayps, "frame_step"
    Stop Event
  Endif
  If ("d" == Lower(Key.Text)) Or (Key.Code == Key.Left) Then 
    If isrecording Then Me.stopRecording()
    If Not existingPlayer Or CURFRAME < 9 Then 
      Stop Event
      Return
    Else
      Try Print #inputplayps, "seek -" & CStr(seekBackwards)   
      isplaying = True
      '      Try Print #inputplayps, "pause"
      Stop Event
    Endif
  Endif
  
  If (Key.Code == Key.up) Then 
    If isrecording Then Me.stopRecording()
    If Not existingPlayer Or CURFRAME < 30 Then 
      Stop Event
      Return
    Else
      Try Print #inputplayps, "set_property time_pos 0" 
      Try Print #inputplayps, "pause"
      If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "go to init"      
      Stop Event
    Endif
  Endif
  If (Key.Code == Key.Down) Then 
    If isrecording Then Me.stopRecording()
    If Not existingPlayer Or CURFRAME > (-30 + sbFrames.MaxValue) Then 
      Stop Event
      Return
    Else
      Try Print #inputplayps, "set_property time_pos " & CStr(ID_LENGTH) 
      Try Print #inputplayps, "pause"
      If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "go to end"
      Stop Event
    Endif
  Endif
  
End

Public Sub Stoprecording()
  
  If Not isrecording Then Print "stop what ? I am not recording"
  
  If existingPlayer Then StopMovie() 
  
  If Not isrecording Then Return
  
  btnRec.Background = Color.Red
  Shell "kill -INT " & recps.Id Wait
  If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "***sent: SIGINT To the recording Process"
  'Print #recps, "quit"
  While isrecording
    Wait 0.05
    If dbg() Then Print ".";
  Wend
  If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "end of recording"
  
End

Public Sub afterStopRecording()
  
  Dim m As String
  Dim i As Integer = 0
  Dim f As Float = 0
  Dim ar As String[]  
  
  btnRec.Background = Color.Black
  btnSaveDir.Enabled = True
  Me.Border = True
  Me.Stacking = Window.Normal
  
  sbFrames.Show
  HBox2.Show  
  Try i = oldme.Count
  If i >= 4 Then Try Me.move(oldme[0], oldme[1], oldme[2], oldme[3])
  If Len(recfile) > 0 Then
    Shell "ls -sh " & recfile To m
    Print "recorded: file " & m  
  Endif
  
  ID_LENGTH = 0
  ar = Split(txtcmd.Text, " ", "", True)
  If ar.Count == 2 Then
    If Split(Trim(ar[1]), ":").Count == 3 Then
      m = Trim(ar[1])
      ar = Split(m, ":")
      Try f = CFloat(ar[2])
      Try f = f + 60 * CInt(ar[1])
      Try f = f + 3600 * CInt(ar[0])
      Print "recorded: more than " & f & " seconds" 
      ID_LENGTH = f        
    Endif
  Endif
  
End

Public Sub onbtnRec_Click()  
  
  btnSaveDir.Enabled = False
  btnRec.Background = Color.Gray
  
End

Public Sub btnRec_KeyRelease()
  
  If keyHasNoEffect() Then Return
  txtcmd_KeyPress()
  txtcmd.Text &= Key.Text
  
End

Public Sub btnRec_KeyPress()
  
  Stop Event    
  
End

Public Sub movemouseto(btn As ToggleButton)
  
  Dim sx As Integer = btn.x + btn.W / 2
  Dim sy As Integer = btn.y + btn.H 
  Dim c As Container = btn.Parent
  
  If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "mouse is at  " & Mouse.ScreenX & ", " & Mouse.screenY
  omx = Mouse.screenX
  omy = Mouse.screenY
  While True
    Try sx = sx + c.x + c.clientX
    If Error Then Break
    Try sy = sy + c.y + c.Clienty
    If Error Then Break
    Try c = c.Parent
    If Error Then Break
  Wend
  If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "target is at " & sx & ", " & sy
  Mouse.Move(sx, sy)
  If (dbg()) Then Print Format(Now, "[mm-dd hh:nn:ss] ") & "M0U5E is at  " & Mouse.screenX & ", " & Mouse.ScreenY
  
End

Public Sub moveMouseBack_Timer()
  
  Mouse.Move(omx, omy)
  moveMouseBack.stop  
  
End

Public Sub sbFrames_KeyRelease()
  
  If keyHasNoEffect() Then Return
  txtcmd_KeyPress()
  txtcmd.Text &= Key.Text
  
End

Public Sub btnKill_KeyRelease()
  
  If keyHasNoEffect() Then Return
  txtcmd_KeyPress()
  txtcmd.Text &= Key.Text
  
End

Public Sub btnOpen_KeyPress()
  
  Stop Event    
  
End

Public Sub btnKill_KeyPress()
  
  Stop Event    
  
End

Public Sub btnPlay2x_KeyPress()
  
  Stop Event    
  
End

Public Sub btnPlay4x_KeyPress()
  
  Stop Event    
  
End

Public Sub btnPlay_KeyPress()
  
  Stop Event    
  
End

Public Sub btnPlayHalf_KeyPress()
  Stop Event    
End

Public Sub btnPlayQuarter_KeyPress()  
  Stop Event      
End

Public Sub btnOpen_KeyRelease()
  
  If keyHasNoEffect() Then Return
  txtcmd_KeyPress()
  txtcmd.Text &= Key.Text
  
End

Public Sub xxbtnPlay2x_KeyRelease()
  
  If keyHasNoEffect() Then Return
  txtcmd_KeyPress()
  txtcmd.Text &= Key.Text
  
End

Public Sub xxbtnPlay4x_KeyRelease()
  
  If keyHasNoEffect() Then Return
  txtcmd_KeyPress()
  txtcmd.Text &= Key.Text
  
End

Public Sub btnPlay_KeyRelease()
  
  If keyHasNoEffect() Then Return
  txtcmd_KeyPress()
  txtcmd.Text &= Key.Text
  
End

Public Sub btnPlayHalf_KeyRelease()
  
  If keyHasNoEffect() Then Return
  txtcmd_KeyPress()
  txtcmd.Text &= Key.Text
  
End

Public Sub btnPlayQuarter_KeyRelease()
  
  If keyHasNoEffect() Then Return
  txtcmd_KeyPress()
  txtcmd.Text &= Key.Text
  
End


Public Sub setTxtcmdText(t As String)
  
  txtcmd.Text = t
  
End

Public Sub hideDwgMoviePlayerForRecording()
  
  Me.Border = False
  sbFrames.hide
  HBox2.Hide
  dwgMoviePlayer.Hide
  dwgMoviePlayer.Enabled = False
  dwgMoviePlayer.Resize(1, 1)
  txtAbout.Hide
  btnRec.Background = Color.Gray
  
End

Public Sub getPanButtonHeight() As Integer
  
  Return panButton.H
  
End

Public Sub getDwgMoviePlayerHandle() As Integer
  
  Return dwgMoviePlayer.Handle
  
End

Private Sub getDim(f As String) As Integer[]
  
  Dim m As String
  Dim n As String
  Dim ar As String[]
  Dim ret As Integer[]
  
  Shell "file " & f To m
  If InStr(Trim(m), " x ") > 0 Then
    ar = Split(Trim(m), ",")
    For Each n In ar
      If InStr(Trim(n), " x ") > 0 Then
        m = Trim(n)
        Break
      Endif
    Next
    ar = Split(m, " x", "", True)
    
    Try ret = [CInt(Trim(ar[0])), CInt(Trim(ar[1]))]
    If (Not Error ) And dbg() Then Print Format(Now, "[mm-dd hh:nn:ss]") & "video size is " & ret[0] & " * " & ret[1]
    If Not Error Then Return ret
  Endif
  
  Return dimRecVideo
  
End

Public Sub btnSaveDir_Click()
  Dim fconf As FConfiguration = New FConfiguration
  fconf.setup(Me)
  fconf.ShowModal()  
End
Public Sub btnSaveDir_KeyRelease()  
  If keyHasNoEffect() Then Return
  txtcmd_KeyPress()
  txtcmd.Text &= Key.Text  
End
Public Sub btnSaveDir_KeyPress()  
   Stop Event
End

Public Sub formatReccmd(incmd As String, mp4 As String, dims As Integer[], vdev As String, frmrate As String) As String
  
  Dim r As String
  
  r = Replace(incmd, "$(FILE)", Quote(Conv$(mp4, Desktop.Charset, System.Charset)))
  r = Replace(r, "$(WIDTH)", CStr(dims[0]))
  r = Replace(r, "$(HEIGHT)", CStr(dims[1]))
  r = Replace(r, "$(RECORDFPS)", frmrate)
  r = Replace(r, "$(VIDEODEVICE)", Conv$(vdev, Desktop.Charset, System.Charset))
  Return r
  
End



Public Sub sbFrames_MouseDown()
  
  Dim f As Float
  
  If isrecording Then Stop Event
  If isrecording Then Return
  If Not existingPlayer Then runMPlayer(recfile, 1)
  'If Not existingPlayer Then Return
  wasrunning = isplaying
  f = CFloat(Mouse.x) / CFloat(sbFrames.W)
  f = f - (0.5 - f) * 0.09
  Try Print #inputplayps, "set_property time_pos " & Replace(CStr(CFloat(ID_LENGTH) * f), ",", ".")
  Print "goto " & CStr(CFloat(ID_LENGTH) * f)
  If Not wasrunning Then Try Print #inputplayps, "pause"  
  Stop Event
  
End

Public Sub sbFrames_MouseUp()
  
  If isrecording Then Stop Event
  If isrecording Then Return
  sbFrames_MouseDown()
  Stop Event
  
End

Public Sub sbFrames_MouseMove()
  
  Stop Event
  
End


Public Sub dbg() As Boolean
  If (Not (Exist(Application.Path & "/" & Application.Args[0]) Or Exist(Application.Args[0]))) Or (InStr(Application.Env["_"], "bin/gambas3") > 0) Or (InStr(Application.Args[0], "bin/gambas3") > 0) Then Return True
  If Application.Args.Count < 2 Then Return False
  Return ((Application.Args[1] == "-d") Or (Application.Args[2] == "-d")) Or (Application.Args[3] == "-d")  
End
