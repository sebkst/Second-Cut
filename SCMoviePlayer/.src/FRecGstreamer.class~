' Gambas class file


'this is a good solution,
' uses the camera to stream it to a loopback
' then gst-launch encodes it
' and  mplayer plays it 

'added to /etc/rc.local :
'aptitude install v4l2loopback-source module-assistant
'module-assistant auto-install v4l2loopback-source
'modprobe v4l2loopback

' plus install gst-v4l2loopback plugin

' problem : impossible to convert proper format imposed by the client on my machine.

Inherits FMoviePlayer

'no use of playps.

Private gstps As Process
Private feedps As Process


Public Sub _new()
  Dim m As String
  Dim Er As String
  Shell "which mencoder" To m
  If Len(m) <= 8 Then Er = "Error : MEncoder was not found.\nPlease install MEncoder to use this software.\nsudo apt-get install mencoder\n"
  
  Shell "which gst-launch" To m
  If Len(m) <= 10 Then Er = Er & "Error : gst-launch was not found.\nPlease install gstreamer-tools to use this software.\nsudo apt-get install gstreamer-tools\n"

  Shell "which lsmod" To m
  If Len(m) <= 5 Then Er = Er & "Error : lsmod not found.\nPlease install lsmod to use this software.\nsudo apt-get install lsmod\n"
  Shell "which grep" To m
  If Len(m) <= 4 Then Er = Er & "Error : grep not found.\nPlease install grep to use this software.\nsudo apt-get install grep\n"

  Shell "lsmod | grep v4l2loopback" To m
  If Len(m) <= 12 Then
   Er = Er & "Error : v4l2loopback module not found.\nPlease install the v4l2loopback module to use this software.\n"
   Er = Er & "apt-get install v4l2loopback-source module-assistant \n sudo module-assistant auto-install v4l2loopback-source\n aptitude install v4l2loopback-source module-assistant\n sudo modprobe v4l2loopback"
  Endif
  Shell "which v4l-info" To m
  If Len(m) <= 4 Then Er = Er & "Error : v4l-info not found.\nPlease install v4l-conf to use this software.\nsudo apt-get install v4l-conf\n"

  Shell "gst-inspect v4l2loopback | wc -l" To m
  If CInt(Trim(m)) < 2 Then
    Shell "gst-inspect v4l2loopback" To m  
    Er = Er & "Error : v4l2loopback plugin for gstreamer not found.\n" & m & "Please install the gst-v4l2loopback module to use this software.\n"
    Er = Er & "Download and unzip https://github.com/umlaeute/gst-v4l2loopback/archive/master.zip .\n Then run: ./autogen.sh && make && make install\n"
  Endif
  
  If Len(Er) > 0 Then Message.Error(Er, "Exit")

  If Len(Er) > 0 Then Quit

Me.recformat = "video/x-raw-yuv,width=1280,height=1024,interlaced=false,pixel-aspect-ratio=1/1,framerate=20/1"

'eeepc
Me.recformat = "video/x-raw-yuv,interlaced=false,pixel-aspect-ratio=1/1,framerate=30/1"

   
 ' record only video in OGG format
 Me.reccmd = " gst-launch v4l2src device=$(VIDEODEVICE)"
 Me.reccmd &= " ! queue ! theoraenc ! queue ! oggmux ! filesink location=$(FILE)"

' Me.reccmd &= " ! queue ! videorate ! 'video/x-raw-yuv,framerate=30/1' ! theoraenc ! queue ! oggmux ! filesink location=$(FILE)"
 
 ' record with audio :

End 



Public Sub btnRec_Click()
  
  'Message.Info("Hello", "OK")
  If Me.existingPlayer Then Me.StopMovie()
  
  If Me.isrecording Then
         Me.StopRecording()
         Return
  Endif
  
  If isStreaming Then StopRecording()
  
     Me.onbtnRec_Click()
 
     Me.recfile = Me.recdir & "/" & Format(Now, "yyyy-mmm-dd_hh-nn-ss") & ".ogg"
     Print "start recording into " & Me.recfile
'    If (Len(Me.getcbVideoDeviceText()) > 0) And Exist(Me.getcbVideoDeviceText()) Then
'      Me.videodevice = Me.getcbVideoDeviceText()
'    Endif
    startRecording(Me.recfile)

End

Static Public Sub findFreev4l2loopback() As String 
Dim m As String
Dim n As String
Dim ar As String[]

'
'grep for

'### v4l2 device info [/dev/video4] ###
'general info
'    VIDIOC_QUERYCAP
'  driver: "v4l2 loopback"


Shell "for i in /dev/video*; do v4l-info $i | grep -q -i 'driver.*:.*v4l2.*loopback' && echo $i ; done" To m
m = Replace(Trim(m), "\n", " ")
Print "loopback devices : " & m
Shell "for i in " & m & " ; do v4l-info $i | grep -q -i 'VIDIOC_ENUMINPUT' || echo $i ; done " To n
Print "FREE loopback devices : " & Replace(Trim(n), "\n", " ")

If Len(Trim(n)) <= 0 Then 
  Message.Error("ERROR : NO FREE v4l2loopback left\n can not start streaming")
  Return ""
Else
  ar = Split(Trim(n), "\n", "", True)
  Return ar[ar.Max]
Endif


'for vdev in /dev/vide*; do gst-launch -v -e --gst-debug=0 videotestsrc  !  v4l2loopback device=$vdev > /dev/null & lpid=$!; echo "pid for $vdev id $lpid"; sleep 3s ;ps -f -p $lpid >/dev/null || echo "$vdev is OCCUPIED" ; ps -f -p $lpid >/dev/null && echo "$vdev should be free(d)" && kill -INT $lpid ; ps -f -p $lpid >/dev/null && echo "$lpid still alive" && kill -9 $lpid ; ps -f -p $lpid >/dev/null && echo "WWWWWWW $lpid still alive" ; ps -f -p $lpid >/dev/null || echo "ok" ; done | less

'result :
'pid for /dev/video0 id 8611
' / dev / video0 Is OCCUPIED
' ok
' pid For / dev / video1 id 8618
' / dev / video1 Is OCCUPIED
' ok
' pid For / dev / video2 id 8627
' / dev / video2 should be Free(d)
' 8627 still alive
' ok
' pid For / dev / video3 id 8635
' / dev / video3 should be Free(d)
' 8635 still alive
' ok
' pid For / dev / video4 id 8643
' / dev / video4 Is OCCUPIED
' ok


End

Public Sub StopRecording()
  ' kill the recps (mencoder), (done in parents)
  If Not Me.isrecording Then Print "stop what ? I am not recording"
  
  If Me.existingPlayer Then Me.StopMovie() 
  
  If Not Me.isrecording Then Return
  
  Me.btnRec.Background = Color.Red
  Shell "kill -INT " & Me.recps.Id Wait
  Print "sending: SIGINT To the recording Process"
  'Print #recps, "quit"
  ' While Me.isrecording
  '   Wait 0.05
  '   Print ".";
  ' Wend
  ' Print "\nend of recording"
  ' 
  
  ' Kill feedps
    While 0 >= InStr(recprocessError & recprocessTrace, "NULL")
       Wait 0.9
       'Print "*" & recprocessTrace
       'recprocessError
       If InStr(recprocessError & recprocessTrace, "ERROR") > 0 Or InStr(recprocessError & recprocessTrace, "ERREUR") > 0 Then
         Print "ERROR in recps"
         Break
       Endif
'    If InStr(gstreamerTrace, "NULL") > 0 Then Return
    Wend
    
  Try Me.recps.Kill
  Try Shell "kill -9 " & Me.recps.Id 
  Print "gstreamer RECORDER killed"
  Print recprocessTrace
  
  Print "--------------"

  
  Try feedps.Kill
  ' kill gst
  Try Shell "kill -9 " & feedps.Id
  Print "feed mplayer killed"
   
  Try Shell "kill -INT " & gstps.Id 
  Print "gstreamer INT"

  While 0 >= InStr(gstreamerTrace, "NULL")
    Wait 0.9
    Print "."
    If InStr(gstreamerTrace, "ERROR") > 0 Or InStr(gstreamerTrace, "ERREUR") > 0 Then
       Print "ERROR in GSTREAMER"
       Break
    Endif
  Wend
  
  Try gstps.Kill
  Try Shell "kill -9 " & gstps.Id 
  Print "gstreamer killed"
  Print gstreamerTrace
  Print "--------------"
  
'  Print "gstreamer : " & gstps.State
 ' Print "mplayer : " & feedps.State  
End


Public Sub startRecording(mp4 As String)
  Dim r As String
  Dim recpscmd As String[]
  Dim feedpscmd As String[]
  Dim gstpscmd As String[]
  Dim freevlb As String = findFreev4l2loopback()
  
  If (Len(freevlb) <= 0) Then 
    StopRecording()
    Return
  Endif
  
  If Len(mp4) <= 0 Then Return
  
  Me.oldme = []
  Me.$bShow = True
  Me.dimPlayVideo = Me.dimRecVideo
  Me.prepareDwgMoviePlayer(True)
  
  gstreamerTrace = ""
  gstreamerError = ""
  gstpscmd = ["gst-launch", "-v", "-e", "--gst-debug=0", "v4l2src", "device=" & Me.videodevice, "!", Me.recformat, "!", "v4l2loopback", "device=" & freevlb] 
  Print Me.join(gstpscmd)  
  gstps = Exec gstpscmd For Read As "gstreamer"
 ' gstps = Shell Me.join(gstpscmd) & " 2>&1" For Read As "gstreamer"
  isStreaming = True
  
  While 0 >= InStr(gstreamerTrace, "GstSystemClock")
    Wait 0.9
    Print "."
    If InStr(gstreamerError, "ERROR") > 0 Or InStr(gstreamerError, "ERREUR") > 0 Then
       Message.Error("ERROR : can not access the device to stream to v4l2loopback " & gstreamerError)
       Break
    Endif
'    If InStr(gstreamerTrace, "NULL") > 0 Then Return
  Wend
  
'  v4l2src device="/dev/video1" ! queue ! videoscale method=1 ! video/x-raw-yuv,width=320,height=240 !
  feedpscmd = ["mplayer", "-wid", CStr(Me.getDwgMoviePlayerHandle()), "-input", "conf=/dev/null", "tv://", "-tv", "device=" & freevlb, "-ao", "null"]
  Print Me.join(feedpscmd)  
  feedps = Shell Me.join(feedpscmd) & " 2>&1" For Read Write As "feedmplayerps"
'  feedps = Exec feedpscmd For Read Write As "feedmplayerps"


  r = Me.formatReccmd(Me.reccmd, mp4, Me.dimRecVideo, freevlb)
  'Sleep 2.5
  Print r  
  recprocessError = ""
  recprocessTrace = ""
'  Me.recps = Shell r For Read Write As "RecProcess"
'  Me.recps = Shell r & " 2>&1" For Read Write As "RecProcess"
  Me.recps = Exec Split(r, " ", "", True) For Read Write As "RecProcess"
  'dwgMoviePlayer.Hide
  'timShow.Enabled = True
  Me.setTxtcmdText("")
  Me.isrecording = True 
   
End
Private recprocessTrace As String
Private recprocessError As String
Public Sub recProcess_Kill()
  Print "Stop Recording"
  Me.isrecording = False   
  Me.afterStopRecording()
  If InStr(recprocessError, "ERROR") > 0 Or InStr(recprocessError, "ERREUR") > 0 Then
     Message.Error("ERROR in RECORDING: verify your parameters ")
  Endif

End

Public Sub recProcess_Read()
   Dim sData As String  
    sData = Read #Last, -255
    'Print "recps: " & sData
    recprocessTrace &= sData
End

Private isStreaming As Boolean = False
Private gstreamerTrace As String
Private gstreamerError As String

Public Sub gstreamer_Read()
    Dim sData As String  
    Read #Last, sData, Lof(Last)
    gstreamerTrace &= sData
    'Print "gstreamer: " & sData
End
Public Sub gstreamer_Kill()
  Print "gstreamer stop"
  If InStr(gstreamerError, "ERROR") > 0 Or InStr(gstreamerError, "ERREUR") > 0 Then
     Me.StopRecording()
     Message.Error("ERROR in streaming to v4l2looopback: verify your parameters ")
  Endif
  isStreaming = False
End

'Public Sub feedmplayerps_Read()
  ' Dim sData As String  
  '  sData = Read #Last, -255
    'Print "feedps: " & sData
'End

Public Sub gstreamer_Error(Err As String)
  Print "EEEEEERRRRRRRRRRR GSTREAMER : " & Err
  gstreamerError &= err
End
Public Sub recProcess_Error(Err As String)
  Print "EEEEEERRRRRRRRRRR RECPS : " & Err
  recprocessError &= err
End
Public Sub Process_Error(Err As String)
  Print "EEEEEERRRRRRRRRRR GENERAL " & Err
End
